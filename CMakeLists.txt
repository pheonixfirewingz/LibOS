cmake_minimum_required(VERSION 3.22.1)
project(libos C CXX)
#options
set(BUILD_DOCS ON)
set(DISABLE_XCB ON)
set(ENABLE_TESTS ON)
set(STATIC_BUILD OFF)
set(TERMIANL_MODE OFF)
set(BUILD_EXTENTIONS OFF)
#options end

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")

include(FlagControl)

# Debug mode by default.
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()

if(CMAKE_BUILD_TYPE MATCHES Debug)
    add_definitions(-DWITH_DEBUG)
endif()

if(${TERMIANL_MODE})
    add_definitions(-DTERMIANL_MODE)
endif()

if(CMAKE_SYSTEM_NAME MATCHES Linux)
    message(INFO "[LIBOS] - building for Linux....")
    if(DISABLE_XCB)
        message(INFO "[LIBOS] - Skiping XCB Build....")
        add_definitions(-DNO_XCB)
    endif()
    add_definitions(-DON_LINUX)
    set(ON_LINUX ON)
    set(CMAKE_CXX_STANDARD 23)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
elseif(CMAKE_SYSTEM_NAME MATCHES WindowsStore)
    message(INFO "[LIBOS] -  building for WindowsStore....")
   add_definitions(-DON_UWP)
   set(ON_UWP ON)
   set(CMAKE_CXX_STANDARD 17)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
elseif(CMAKE_SYSTEM_NAME MATCHES Windows)
    message(INFO "[LIBOS] - building for Windows....")
    add_definitions(-DON_WINDOWS)
    set(ON_WINDOWS ON)
    set(CMAKE_CXX_STANDARD 23)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
elseif(CMAKE_SYSTEM_NAME MATCHES Android)
    message(INFO "[LIBOS] - building for Android....")
    add_definitions(-DON_ANDROID)
    set(BUILD_EXTENTIONS OFF)
    set(BUILD_DOCS OFF)
    if(${STATIC_BUILD})
        set(STATIC_BUILD OFF)
    endif()
    set(ON_ANDROID ON)
    set(CMAKE_CXX_STANDARD 23)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
else()
    message(FATAL_ERROR "system not supported")
endif()

if (CMAKE_CXX_COMPILER_ID MATCHES Clang)
    add_definitions(-DIS_CLANG)
elseif (CMAKE_CXX_COMPILER_ID MATCHES GNU)
    if(CMAKE_C_COMPILER_VERSION VERSION_LESS 12)
        message(FATAL_ERROR "anything lower that gcc-12 compiler not supported")
    endif()
    add_definitions(-DIS_GCC)
elseif (CMAKE_CXX_COMPILER_ID MATCHES MSVC)
    add_definitions(-DIS_MSVC)
else()
    message(FATAL_ERROR "compiler not supported")
endif()

if (${STATIC_BUILD})
    message(INFO "[LIBOS] -  building static lib...")
    add_library(libos STATIC ${PROJECT_SOURCE_DIR}/base.cpp)
    flagsSetup(libos)
else()
    add_library(libos SHARED ${PROJECT_SOURCE_DIR}/base.cpp)
    flagsSetup(libos)
endif()

if(CMAKE_SYSTEM_NAME MATCHES Linux)
    include(FindPkgConfig)
    pkg_check_modules(LIBDECOR libdecor-0)
    pkg_check_modules(WAYLAND wayland-client)
    pkg_check_modules(XKB xkbcommon)
    if(!DISABLE_XCB)
        pkg_check_modules(XCB_KEYSYMS xcb-keysyms)
        pkg_check_modules(XCB xcb)
    endif()
    pkg_check_modules(ICONV iconv)

    if(!DISABLE_XCB)
        target_include_directories(libos PRIVATE ${XCB_INCLUDE_DIR})
        target_include_directories(libos PRIVATE ${XCB_KEYSYMS_INCLUDE_DIR})
    endif()
    target_include_directories(libos PRIVATE ${WAYLAND_INCLUDE_DIR})
    target_include_directories(libos PRIVATE ${XKB_INCLUDE_DIR})
    target_include_directories(libos PRIVATE ${LIBDECOR_INCLUDE_DIRS})
    target_include_directories(libos PRIVATE ${ICONV_INCLUDE_DIRS})
    target_include_directories(libos PRIVATE ${PROJECT_SOURCE_DIR}/Includes)
    target_include_directories(libos PRIVATE ${PROJECT_SOURCE_DIR}/src/shared STATIC)

    if(!DISABLE_XCB)
        target_link_libraries(libos PRIVATE ${LIBDECOR_LIBRARIES} ${XKB_LIBRARIES} ${WAYLAND_LIBRARIES} ${XCB_LIBRARIES} ${XCB_KEYSYMS_LIBRARIES} ${ICONV_LIBRARIES})
    else()
        target_link_libraries(libos PRIVATE ${LIBDECOR_LIBRARIES} ${XKB_LIBRARIES} ${WAYLAND_LIBRARIES} ${ICONV_LIBRARIES})
    endif()
    set_target_properties(libos PROPERTIES OUTPUT_NAME "os")
elseif(CMAKE_SYSTEM_NAME MATCHES Android)
    find_package(Java REQUIRED)
    include(UseJava)
    # Find JNI
    find_package(JNI REQUIRED)
    find_library(log-lib log)
    target_link_libraries(libos android ${log-lib} ${JNI_LIBRARIES})
    include_directories(PUBLIC ${JNI_INCLUDE_DIRS})
    set_target_properties(libos PROPERTIES OUTPUT_NAME "os")
else()
    set_target_properties(libos PROPERTIES OUTPUT_NAME "libos")
endif()

target_include_directories(libos PRIVATE ${PROJECT_SOURCE_DIR}/Includes STATIC)
target_include_directories(libos PRIVATE ${PROJECT_SOURCE_DIR}/src/libOS STATIC)
include(SourceList)
add_subdirectory(${PROJECT_SOURCE_DIR}/src)

#extentions may not work on android so is disabled for now
if(${BUILD_EXTENTIONS})
    add_definitions(-DBUILD_EXTENTIONS)
    set(BUILD_EXTENTIONS_SRC ${PROJECT_SOURCE_DIR}/src/libOSExtensions/Config.cpp)

    if (${STATIC_BUILD})
        message(INFO "[LIBOSEXTENTIONS] -  building static lib...")
        add_library(libosextentions STATIC ${BUILD_EXTENTIONS_SRC})
        flagsSetup(libosextentions)
    else()
        add_library(libosextentions SHARED ${BUILD_EXTENTIONS_SRC})
        flagsSetup(libosextentions)
    endif()
    target_include_directories(libosextentions PRIVATE ${PROJECT_SOURCE_DIR}/Includes STATIC)
    if(CMAKE_SYSTEM_NAME MATCHES Linux)
        set_target_properties(libosextentions PROPERTIES OUTPUT_NAME "osextentions")
    else()
        set_target_properties(libosextentions PROPERTIES OUTPUT_NAME "libosextentions")
    endif()
endif()

if(${ENABLE_TESTS})
    include(Testing)
endif()

if(${BUILD_DOCS})
    include(Doxygen)
endif()
