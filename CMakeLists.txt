cmake_minimum_required(VERSION 3.22.2)
project(libos C CXX)
#options
set(BUILD_DOCS OFF)
set(ENABLE_TESTS ON)
set(STATIC_BUILD OFF)
set(TERMIANL_MODE ON)
#options end

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")

if(CMAKE_SYSTEM_NAME MATCHES WindowsStore OR CMAKE_SYSTEM_NAME MATCHES Windows)
    set(CMAKE_CXX_FLAGS "")
    set(CMAKE_CXX_FLAGS_DEBUG "")
    set(CMAKE_CXX_FLAGS_RELEASE "")
endif()
# Debug mode by default.
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()

if(CMAKE_BUILD_TYPE MATCHES Debug)
    add_definitions(-DWITH_DEBUG)
endif()

if(${TERMIANL_MODE})
    add_definitions(-DTERMIANL_MODE)
endif()

if(CMAKE_SYSTEM_NAME MATCHES Linux)
    message(INFO "[LIBOS] - building for Linux....")
    add_definitions(-DON_LINUX)
    set(ON_LINUX ON)
    set(CMAKE_CXX_STANDARD 23)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
elseif(CMAKE_SYSTEM_NAME MATCHES WindowsStore)
    message(INFO "[LIBOS] -  building for WindowsStore....")
   add_definitions(-DON_UWP)
   set(ON_UWP ON)
   set(CMAKE_CXX_STANDARD 17)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
elseif(CMAKE_SYSTEM_NAME MATCHES Windows)
    message(INFO "[LIBOS] - building for Windows....")
    add_definitions(-DON_WINDOWS)
    set(ON_WINDOWS ON)
    set(CMAKE_CXX_STANDARD 23)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
else()
    message(FATAL_ERROR "system not supported")
endif()

if (CMAKE_CXX_COMPILER_ID MATCHES Clang)
    add_definitions(-DIS_CLANG)
elseif (CMAKE_CXX_COMPILER_ID MATCHES GNU)
    if(CMAKE_C_COMPILER_VERSION VERSION_LESS 12)
        message(FATAL_ERROR "anything lower that gcc-12 compiler not supported")
    endif()
    add_definitions(-DIS_GCC)
elseif (CMAKE_CXX_COMPILER_ID MATCHES MSVC)
    add_definitions(-DIS_MSVC)
else()
    message(FATAL_ERROR "compiler not supported")
endif()

if (${STATIC_BUILD})
    message(INFO "[LIBOS] -  building static lib...")
    add_library(libos STATIC ${PROJECT_SOURCE_DIR}/base.cpp)
else()
    add_library(libos SHARED ${PROJECT_SOURCE_DIR}/base.cpp)
endif()

if(CMAKE_SYSTEM_NAME MATCHES Linux)
    include(FindPkgConfig)
    pkg_check_modules(LIBDECOR libdecor-0)
    pkg_check_modules(WAYLAND wayland-client)
    pkg_check_modules(XKB xkbcommon)
    pkg_check_modules(XCB_KEYSYMS xcb-keysyms)
    pkg_check_modules(XCB xcb)

    target_compile_options(libos PRIVATE -W -Werror -Wall -Wextra -Wshadow -Wpedantic -fno-exceptions)
    set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -fno-rtti)
    if(!${STATIC_BUILD})
        target_link_options(libos PRIVATE -static-libstdc++)
    endif()
    if(CMAKE_BUILD_TYPE MATCHES Debug)
        if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
            #target_compile_options(libos PRIVATE -fanalyzer)
        endif()
        target_compile_options(libos PRIVATE -O0 -g3)
    else()
        target_compile_options(libos PRIVATE -O3 -g0 -flto -finline-functions)
    endif()

    target_include_directories(libos PRIVATE ${XCB_INCLUDE_DIR})
    target_include_directories(libos PRIVATE ${XCB_KEYSYMS_INCLUDE_DIR})
    target_include_directories(libos PRIVATE ${WAYLAND_INCLUDE_DIR})
    target_include_directories(libos PRIVATE ${XKB_INCLUDE_DIR})
    target_include_directories(libos PRIVATE ${LIBDECOR_INCLUDE_DIRS})
    target_include_directories(libos PRIVATE ${PROJECT_SOURCE_DIR}/Includes)
    target_include_directories(libos PRIVATE ${PROJECT_SOURCE_DIR}/src/shared STATIC)

    target_link_libraries(libos PRIVATE ${LIBDECOR_LIBRARIES} ${XKB_LIBRARIES} ${WAYLAND_LIBRARIES} ${XCB_LIBRARIES} ${XCB_KEYSYMS_LIBRARIES})
    set_target_properties(libos PROPERTIES OUTPUT_NAME "libos")
elseif(CMAKE_SYSTEM_NAME MATCHES WindowsStore)
    target_compile_options(libos PRIVATE /W4 /WX /ZW /EHsc /await /external:anglebrackets /external:W0)
    set_target_properties(libos PROPERTIES VS_WINRT_COMPONENT TRUE OUTPUT_NAME "libos"  VS_CPPWINRT true)
elseif(CMAKE_SYSTEM_NAME MATCHES Windows)
    if(MSVC)
        if(CMAKE_BUILD_TYPE MATCHES Debug)
            if(CMAKE_CXX_COMPILER_ID MATCHES GNU)
                #target_compile_options(libos PRIVATE -fanalyzer)
            endif()
            target_compile_options(libos PRIVATE /Od /W4 /WX /RTC1 /Z7  /EHsc /sdl /JMC /external:anglebrackets /external:W0)
            target_link_options(libos PRIVATE /DEBUG:FULL)
        else()
            target_compile_options(libos PRIVATE /O2 /sdl /EHsc /external:anglebrackets /external:W0)
            target_link_options(libos PRIVATE /OPT:REF,ICF,LBR /RELEASE)
         endif()
    else()
        if(CMAKE_BUILD_TYPE MATCHES Debug)
            if(CMAKE_CXX_COMPILER_ID MATCHES GNU)
                #target_compile_options(libos PRIVATE -fanalyzer)
            endif()
            target_compile_options(libos PRIVATE -O0 -g3)
        else()
            target_compile_options(libos PRIVATE -O3 -g0 -flto -finline-functions)
        endif()
    endif()
    set_target_properties(libos PROPERTIES OUTPUT_NAME "libos")
else()
    message(FATAL_ERROR "system not supported")
endif()

target_include_directories(libos PRIVATE ${PROJECT_SOURCE_DIR}/Includes STATIC)
target_include_directories(libos PRIVATE ${PROJECT_SOURCE_DIR}/src/libOS STATIC)
include(SourceList)
add_subdirectory(${PROJECT_SOURCE_DIR}/src)

if(${ENABLE_TESTS})
    include(Testing)
endif()

if(${BUILD_DOCS})
    include(Doxygen)
endif()
